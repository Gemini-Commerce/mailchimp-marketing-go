
// Code generated by go-swagger; DO NOT EDIT.





package account_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command


import (
  "io"
  "net/http"

  "github.com/go-openapi/errors"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/strfmt"
  "github.com/go-openapi/swag"
  "github.com/go-openapi/validate"

  	"client/client/account_export"
	"client/client/account_exports"
	"client/client/activity_feed"
	"client/client/authorized_apps"
	"client/client/automations"
	"client/client/batch_webhooks"
	"client/client/batches"
	"client/client/campaign_folders"
	"client/client/campaigns"
	"client/client/connected_sites"
	"client/client/conversations"
	"client/client/customer_journeys"
	"client/client/ecommerce"
	"client/client/facebook_ads"
	"client/client/file_manager"
	"client/client/landing_pages"
	"client/client/lists"
	"client/client/ping"
	"client/client/reporting"
	"client/client/reports"
	"client/client/root"
	"client/client/search_campaigns"
	"client/client/search_members"
	"client/client/surveys"
	"client/client/template_folders"
	"client/client/templates"
	"client/client/verified_domains"
	"client/models"
  	"client/client"
)

// GetAccountExportIDReader is a Reader for the GetAccountExportID structure.
type GetAccountExportIDReader struct {
  formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountExportIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
  switch response.Code() {
    case 200:
      result := NewGetAccountExportIDOK()
      if err := result.readResponse(response, consumer, o.formats); err != nil {
        return nil, err
      }
      return result, nil
    default:
      result := NewGetAccountExportIDDefault(response.Code())
      if err := result.readResponse(response, consumer, o.formats); err != nil {
        return nil, err
      }
      if response.Code() / 100 == 2 {
        return result, nil
      }
      return nil, result
  }
}


  
// NewGetAccountExportIDOK creates a GetAccountExportIDOK with default headers values
func NewGetAccountExportIDOK() *GetAccountExportIDOK {
  return &GetAccountExportIDOK{
    
    }
}

/* GetAccountExportIDOK describes a response with status code 200, with default header values.

 GetAccountExportIDOK get account export Id o k
 */
type GetAccountExportIDOK struct {

  Payload *GetAccountExportIDOKBody
}


func (o *GetAccountExportIDOK) Error() string {
	return fmt.Sprintf("[GET /account-exports/{export_id}][%d] getAccountExportIdOK  %+v", 200, o.Payload)
}
func (o *GetAccountExportIDOK) GetPayload() *GetAccountExportIDOKBody {
	return o.Payload
}

func (o *GetAccountExportIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

  o.Payload = new(GetAccountExportIDOKBody)

  // response payload
  if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
    return err
  }

  return nil
}


  
// NewGetAccountExportIDDefault creates a GetAccountExportIDDefault with default headers values
func NewGetAccountExportIDDefault(code int) *GetAccountExportIDDefault {
  return &GetAccountExportIDDefault{
    _statusCode: code,
    
    }
}

/* GetAccountExportIDDefault describes a response with status code -1, with default header values.

 An error generated by the Mailchimp API.
 */
type GetAccountExportIDDefault struct {
  _statusCode int

  Payload *GetAccountExportIDDefaultBody
}

// Code gets the status code for the get account export Id default response
func (o *GetAccountExportIDDefault) Code() int {
  return o._statusCode
}


func (o *GetAccountExportIDDefault) Error() string {
	return fmt.Sprintf("[GET /account-exports/{export_id}][%d] getAccountExportId default  %+v", o._statusCode, o.Payload)
}
func (o *GetAccountExportIDDefault) GetPayload() *GetAccountExportIDDefaultBody {
	return o.Payload
}

func (o *GetAccountExportIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

  o.Payload = new(GetAccountExportIDDefaultBody)

  // response payload
  if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
    return err
  }

  return nil
}



/*GetAccountExportIDDefaultBody Problem Detail Document
//
// An error generated by the Mailchimp API. Conforms to IETF draft 'draft-nottingham-http-problem-06'.
swagger:model GetAccountExportIDDefaultBody
*/
      type GetAccountExportIDDefaultBody struct {
  
  
    // Error Message
//
// A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
// Example: The requested resource could not be found.
// Required: true
Detail *string `json:"detail"`

  
    // Instance ID
//
// A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
// Example: 995c5cb0-3280-4a6e-808b-3b096d0bb219
// Required: true
Instance *string `json:"instance"`

  
    // HTTP Status Code
//
// The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
// Example: 404
// Required: true
Status *int64 `json:"status"`

  
    // Error Title
//
// A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
// Example: Resource Not Found
// Required: true
Title *string `json:"title"`

  
    // Problem Type
//
// An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
// Example: https://mailchimp.com/developer/marketing/docs/errors/
// Required: true
Type *string `json:"type"`

  
  
}
  
    
  
  
  
// Validate validates this get account export ID default body
func (o *GetAccountExportIDDefaultBody) Validate(formats strfmt.Registry) error {
  var res []error
  
  
  

  
    
      if err := o.validateDetail(formats); err != nil {
        res = append(res, err)
      }
    
  
    
      if err := o.validateInstance(formats); err != nil {
        res = append(res, err)
      }
    
  
    
      if err := o.validateStatus(formats); err != nil {
        res = append(res, err)
      }
    
  
    
      if err := o.validateTitle(formats); err != nil {
        res = append(res, err)
      }
    
  
    
      if err := o.validateType(formats); err != nil {
        res = append(res, err)
      }
    
  
  
  

  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}

  
    
      
      
      
      

      
func (o *GetAccountExportIDDefaultBody) validateDetail(formats strfmt.Registry) error {
        
      
  
  if err := validate.Required("getAccountExportId default"+"."+"detail", "body", o.Detail); err != nil {
    return err
  }
  
  
  
  
  
  
  
  



  return nil
}
      
    
  
    
      
      
      
      

      
func (o *GetAccountExportIDDefaultBody) validateInstance(formats strfmt.Registry) error {
        
      
  
  if err := validate.Required("getAccountExportId default"+"."+"instance", "body", o.Instance); err != nil {
    return err
  }
  
  
  
  
  
  
  
  



  return nil
}
      
    
  
    
      
      
      
      

      
func (o *GetAccountExportIDDefaultBody) validateStatus(formats strfmt.Registry) error {
        
      
  
  if err := validate.Required("getAccountExportId default"+"."+"status", "body", o.Status); err != nil {
    return err
  }
  
  
  
  
  
  
  
  



  return nil
}
      
    
  
    
      
      
      
      

      
func (o *GetAccountExportIDDefaultBody) validateTitle(formats strfmt.Registry) error {
        
      
  
  if err := validate.Required("getAccountExportId default"+"."+"title", "body", o.Title); err != nil {
    return err
  }
  
  
  
  
  
  
  
  



  return nil
}
      
    
  
    
      
      
      
      

      
func (o *GetAccountExportIDDefaultBody) validateType(formats strfmt.Registry) error {
        
      
  
  if err := validate.Required("getAccountExportId default"+"."+"type", "body", o.Type); err != nil {
    return err
  }
  
  
  
  
  
  
  
  



  return nil
}
      
    
  
  

  

// ContextValidate validates this get account export ID default body based on context it is used 
func (o *GetAccountExportIDDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
  return nil
}
  
// MarshalBinary interface implementation
func (o *GetAccountExportIDDefaultBody) MarshalBinary() ([]byte, error) {
  if o == nil {
    return nil, nil
  }
  return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountExportIDDefaultBody) UnmarshalBinary(b []byte) error {
  var res GetAccountExportIDDefaultBody
  if err := swag.ReadJSON(b, &res); err != nil {
    return err
  }
  *o = res
  return nil
}

/*GetAccountExportIDOKBody An account export.
swagger:model GetAccountExportIDOKBody
*/
      type GetAccountExportIDOKBody struct {
  
  
    // Links
//
// A list of link types and descriptions for the API schema documents.
// Read Only: true
Links []*GetAccountExportIDOKBodyLinksItems0 `json:"_links"`

  
    // Download URL
//
// If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes.
DownloadURL string `json:"download_url,omitempty"`

  
    // Export ID
//
// The ID for the export.
ExportID int64 `json:"export_id,omitempty"`

  
    // Finish Time
//
// If finished, the finish time for the export.
// Format: date-time
Finished strfmt.DateTime `json:"finished,omitempty"`

  
    // Export Size
//
// The size of the uncompressed export in bytes.
SizeInBytes int64 `json:"size_in_bytes,omitempty"`

  
    // Start Time
//
// Start time for the export.
// Format: date-time
Started strfmt.DateTime `json:"started,omitempty"`

  
  
}
  
    
  
  
  
// Validate validates this get account export ID o k body
func (o *GetAccountExportIDOKBody) Validate(formats strfmt.Registry) error {
  var res []error
  
  
  

  
    
      if err := o.validateLinks(formats); err != nil {
        res = append(res, err)
      }
    
  
    
  
    
  
    
      if err := o.validateFinished(formats); err != nil {
        res = append(res, err)
      }
    
  
    
  
    
      if err := o.validateStarted(formats); err != nil {
        res = append(res, err)
      }
    
  
  
  

  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}

  
    
      
      
      
      

      
func (o *GetAccountExportIDOKBody) validateLinks(formats strfmt.Registry) error {
  if swag.IsZero(o.Links) { // not required
    return nil
  }
        
    
  
  
  
  
  
  
  
      for i := 0; i < len(o.Links); i++ {
          if swag.IsZero(o.Links[i]) { // not required
            continue
          }
        
    
      if o.Links[i] != nil {
      if err := o.Links[i].Validate(formats); err != nil {
        if ve, ok := err.(*errors.Validation); ok {
          return ve.ValidateName("getAccountExportIdOK"+"."+"_links"+ "." + strconv.Itoa(i))
        } else if ce, ok := err.(*errors.CompositeError); ok {
          return ce.ValidateName("getAccountExportIdOK"+"."+"_links"+ "." + strconv.Itoa(i))
        }
        return err
      }
    }


      }



  return nil
}
      
    
  
    
  
    
  
    
      
      
      
      

      
func (o *GetAccountExportIDOKBody) validateFinished(formats strfmt.Registry) error {
  if swag.IsZero(o.Finished) { // not required
    return nil
  }
        
      
  
  
  
  
  
  
  
  
  
    if err := validate.FormatOf("getAccountExportIdOK"+"."+"finished", "body", "date-time", o.Finished.String(), formats); err != nil {
  return err
}




  return nil
}
      
    
  
    
  
    
      
      
      
      

      
func (o *GetAccountExportIDOKBody) validateStarted(formats strfmt.Registry) error {
  if swag.IsZero(o.Started) { // not required
    return nil
  }
        
      
  
  
  
  
  
  
  
  
  
    if err := validate.FormatOf("getAccountExportIdOK"+"."+"started", "body", "date-time", o.Started.String(), formats); err != nil {
  return err
}




  return nil
}
      
    
  
  

  

    
// ContextValidate validate this get account export ID o k body based on the context it is used
func (o *GetAccountExportIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
  var res []error
   
  


  
     
      if err := o.contextValidateLinks(ctx, formats); err != nil {
        res = append(res, err)
      }
    
  
    
  
    
  
    
  
    
  
    
  
  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}


  
    
func (o *GetAccountExportIDOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {
       
    
  
    if err := validate.ReadOnly(ctx, "getAccountExportIdOK"+"."+"_links", "body", []*GetAccountExportIDOKBodyLinksItems0(o.Links)); err != nil{
      return err
    }
  
  
      for i := 0; i < len(o.Links); i++ {
        
    
  
      if o.Links[i] != nil {
      if err := o.Links[i].ContextValidate(ctx, formats); err != nil {
        if ve, ok := err.(*errors.Validation); ok {
          return ve.ValidateName("getAccountExportIdOK"+"."+"_links"+ "." + strconv.Itoa(i))
        } else if ce, ok := err.(*errors.CompositeError); ok {
          return ce.ValidateName("getAccountExportIdOK"+"."+"_links"+ "." + strconv.Itoa(i))
        }
        return err
      }
    }



      }



  return nil
}
    
  
    
  
    
  
    
  
    
  
    
   
   

  
// MarshalBinary interface implementation
func (o *GetAccountExportIDOKBody) MarshalBinary() ([]byte, error) {
  if o == nil {
    return nil, nil
  }
  return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountExportIDOKBody) UnmarshalBinary(b []byte) error {
  var res GetAccountExportIDOKBody
  if err := swag.ReadJSON(b, &res); err != nil {
    return err
  }
  *o = res
  return nil
}

/*GetAccountExportIDOKBodyLinksItems0 Resource Link
//
// This object represents a link from the resource where it is found to another resource or action that may be performed.
swagger:model GetAccountExportIDOKBodyLinksItems0
*/
      type GetAccountExportIDOKBodyLinksItems0 struct {
  
  
    // Href
//
// This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
// Read Only: true
Href string `json:"href,omitempty"`

  
    // Method
//
// The HTTP method that should be used when accessing the URL defined in 'href'.
// Read Only: true
// Enum: [GET POST PUT PATCH DELETE OPTIONS HEAD]
Method string `json:"method,omitempty"`

  
    // Rel
//
// As with an HTML 'rel' attribute, this describes the type of link.
// Read Only: true
Rel string `json:"rel,omitempty"`

  
    // Schema
//
// For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
// Read Only: true
Schema string `json:"schema,omitempty"`

  
    // Target Schema
//
// For GETs, this is a URL representing the schema that the response should conform to.
// Read Only: true
TargetSchema string `json:"targetSchema,omitempty"`

  
  
}
  
    
  
  
  
// Validate validates this get account export ID o k body links items0
func (o *GetAccountExportIDOKBodyLinksItems0) Validate(formats strfmt.Registry) error {
  var res []error
  
  
  

  
    
  
    
      if err := o.validateMethod(formats); err != nil {
        res = append(res, err)
      }
    
  
    
  
    
  
    
  
  
  

  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}

  
    
  
    
      
var getAccountExportIdOKBodyLinksItems0TypeMethodPropEnum []interface{}

func init() {
  var res []string
  if err := json.Unmarshal([]byte(`["GET","POST","PUT","PATCH","DELETE","OPTIONS","HEAD"]`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    getAccountExportIdOKBodyLinksItems0TypeMethodPropEnum = append(getAccountExportIdOKBodyLinksItems0TypeMethodPropEnum, v)
  }
}

        
          
          
const (
          
  // GetAccountExportIDOKBodyLinksItems0MethodGET captures enum value "GET"
	GetAccountExportIDOKBodyLinksItems0MethodGET string = "GET"
          
  // GetAccountExportIDOKBodyLinksItems0MethodPOST captures enum value "POST"
	GetAccountExportIDOKBodyLinksItems0MethodPOST string = "POST"
          
  // GetAccountExportIDOKBodyLinksItems0MethodPUT captures enum value "PUT"
	GetAccountExportIDOKBodyLinksItems0MethodPUT string = "PUT"
          
  // GetAccountExportIDOKBodyLinksItems0MethodPATCH captures enum value "PATCH"
	GetAccountExportIDOKBodyLinksItems0MethodPATCH string = "PATCH"
          
  // GetAccountExportIDOKBodyLinksItems0MethodDELETE captures enum value "DELETE"
	GetAccountExportIDOKBodyLinksItems0MethodDELETE string = "DELETE"
          
  // GetAccountExportIDOKBodyLinksItems0MethodOPTIONS captures enum value "OPTIONS"
	GetAccountExportIDOKBodyLinksItems0MethodOPTIONS string = "OPTIONS"
          
  // GetAccountExportIDOKBodyLinksItems0MethodHEAD captures enum value "HEAD"
	GetAccountExportIDOKBodyLinksItems0MethodHEAD string = "HEAD"
          
)
        

// prop value enum
func (o *GetAccountExportIDOKBodyLinksItems0) validateMethodEnum(path, location string, value string) error {
  if err := validate.EnumCase(path, location, value, getAccountExportIdOKBodyLinksItems0TypeMethodPropEnum, true); err != nil {
    return err
  }
  return nil
}
      
      
      
      

      
func (o *GetAccountExportIDOKBodyLinksItems0) validateMethod(formats strfmt.Registry) error {
  if swag.IsZero(o.Method) { // not required
    return nil
  }
        
      
  
  
  
  
  
  
  
  
  // value enum
  if err := o.validateMethodEnum("method", "body", o.Method); err != nil {
    return err
  }
  



  return nil
}
      
    
  
    
  
    
  
    
  
  

  

    
// ContextValidate validate this get account export ID o k body links items0 based on the context it is used
func (o *GetAccountExportIDOKBodyLinksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
  var res []error
   
  


  
     
      if err := o.contextValidateHref(ctx, formats); err != nil {
        res = append(res, err)
      }
    
  
     
      if err := o.contextValidateMethod(ctx, formats); err != nil {
        res = append(res, err)
      }
    
  
     
      if err := o.contextValidateRel(ctx, formats); err != nil {
        res = append(res, err)
      }
    
  
     
      if err := o.contextValidateSchema(ctx, formats); err != nil {
        res = append(res, err)
      }
    
  
     
      if err := o.contextValidateTargetSchema(ctx, formats); err != nil {
        res = append(res, err)
      }
    
  
  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}


  
    
func (o *GetAccountExportIDOKBodyLinksItems0) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {
       
      
  
    if err := validate.ReadOnly(ctx, "href", "body", string(o.Href)); err != nil{
      return err
    }
  



  return nil
}
    
  
    
func (o *GetAccountExportIDOKBodyLinksItems0) contextValidateMethod(ctx context.Context, formats strfmt.Registry) error {
       
      
  
    if err := validate.ReadOnly(ctx, "method", "body", string(o.Method)); err != nil{
      return err
    }
  



  return nil
}
    
  
    
func (o *GetAccountExportIDOKBodyLinksItems0) contextValidateRel(ctx context.Context, formats strfmt.Registry) error {
       
      
  
    if err := validate.ReadOnly(ctx, "rel", "body", string(o.Rel)); err != nil{
      return err
    }
  



  return nil
}
    
  
    
func (o *GetAccountExportIDOKBodyLinksItems0) contextValidateSchema(ctx context.Context, formats strfmt.Registry) error {
       
      
  
    if err := validate.ReadOnly(ctx, "schema", "body", string(o.Schema)); err != nil{
      return err
    }
  



  return nil
}
    
  
    
func (o *GetAccountExportIDOKBodyLinksItems0) contextValidateTargetSchema(ctx context.Context, formats strfmt.Registry) error {
       
      
  
    if err := validate.ReadOnly(ctx, "targetSchema", "body", string(o.TargetSchema)); err != nil{
      return err
    }
  



  return nil
}
    
   
   

  
// MarshalBinary interface implementation
func (o *GetAccountExportIDOKBodyLinksItems0) MarshalBinary() ([]byte, error) {
  if o == nil {
    return nil, nil
  }
  return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountExportIDOKBodyLinksItems0) UnmarshalBinary(b []byte) error {
  var res GetAccountExportIDOKBodyLinksItems0
  if err := swag.ReadJSON(b, &res); err != nil {
    return err
  }
  *o = res
  return nil
}

